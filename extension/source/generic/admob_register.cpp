/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "admob_autodefs.h"
#include "s3eEdk.h"
#include "admob.h"
//Declarations of Init and Term functions
extern s3eResult admobInit();
extern void admobTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static s3eResult admob_init_wrap(const char* pub_id, int ad_type, int orientation, int x, int y)
{
    IwTrace(ADMOB_VERBOSE, ("calling admob func on main thread: admob_init"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)admob_init, 5, pub_id, ad_type, orientation, x, y);
}

static s3eResult admob_resize_wrap(int ad_type)
{
    IwTrace(ADMOB_VERBOSE, ("calling admob func on main thread: admob_resize"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)admob_resize, 1, ad_type);
}

static s3eResult admob_show_wrap()
{
    IwTrace(ADMOB_VERBOSE, ("calling admob func on main thread: admob_show"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)admob_show, 0);
}

static s3eResult admob_refresh_wrap()
{
    IwTrace(ADMOB_VERBOSE, ("calling admob func on main thread: admob_refresh"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)admob_refresh, 0);
}

static s3eResult admob_hide_wrap()
{
    IwTrace(ADMOB_VERBOSE, ("calling admob func on main thread: admob_hide"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)admob_hide, 0);
}

static s3eResult admob_move_wrap(int orientation, int x, int y)
{
    IwTrace(ADMOB_VERBOSE, ("calling admob func on main thread: admob_move"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)admob_move, 3, orientation, x, y);
}

#define admob_init admob_init_wrap
#define admob_resize admob_resize_wrap
#define admob_show admob_show_wrap
#define admob_refresh admob_refresh_wrap
#define admob_hide admob_hide_wrap
#define admob_move admob_move_wrap

#endif

void admobRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[6];
    funcPtrs[0] = (void*)admob_init;
    funcPtrs[1] = (void*)admob_resize;
    funcPtrs[2] = (void*)admob_show;
    funcPtrs[3] = (void*)admob_refresh;
    funcPtrs[4] = (void*)admob_hide;
    funcPtrs[5] = (void*)admob_move;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[6] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("admob", funcPtrs, sizeof(funcPtrs), flags, admobInit, admobTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int admobStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&admobRegisterExt;
    return 0;
}

int g_admobVal = admobStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    admobRegisterExt();
}
#endif

#endif
